# --- 1) install deps ---
FROM node:20-alpine AS deps
WORKDIR /app

# Use a non-root user for better security (optional)
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Copy package manifests
COPY package.json package-lock.json* ./

# Install dependencies
RUN npm ci

# --- 2) build the app ---
FROM node:20-alpine AS builder
WORKDIR /app

# Copy source + node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Disable ESLint + TypeScript checking during build (skip lint errors inside Docker)
ENV NEXT_DISABLE_ESLINT=1
ENV NEXT_DISABLE_TYPECHECK=1

# Build Next.js app
RUN npm run build

# --- 3) runtime image (smaller) ---
FROM node:20-alpine AS runner
WORKDIR /app

# Create the same user and switch to it
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
USER appuser

# Copy only the artifacts needed to run
COPY --from=builder --chown=appuser:appgroup /app/.next ./.next
COPY --from=builder --chown=appuser:appgroup /app/public ./public
COPY --from=builder --chown=appuser:appgroup /app/package.json ./package.json
COPY --from=builder --chown=appuser:appgroup /app/node_modules ./node_modules

# If you rely on next.config.js at runtime (usually not required), copy it
# COPY --from=builder --chown=appuser:appgroup /app/next.config.js ./next.config.js

EXPOSE 3000

# Simple healthcheck: check the root page
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s CMD wget -qO- http://localhost:3000/ || exit 1

# Start the production server
CMD ["npm", "start"]
